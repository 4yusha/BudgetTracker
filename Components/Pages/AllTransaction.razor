@page "/alltransactions"
    @using BudgetTracker.Components.Model
    @inject UserService UserService
    @inject NavigationManager NavigationManager
    @inject IJSRuntime JSRuntime

<!-- Transaction Page -->
<div class="transaction_page">
    <div class="transaction_box">
        <!-- For message display -->
        @if (isSuccess)
        {
            <p class="success_message">@Message</p>
        }
        else if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert_warning_message">@Message</div>
        }

        <h2>Add New Transaction</h2>
        <EditForm Model="newTransact" OnValidSubmit="HandlingTransactSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Transaction Fields and Form -->
            <div class="transaction_form">
                <label for="transactionType">Transaction Type</label>
                <InputSelect id="transactionType" @bind-Value="newTransact.Type" class="alltransaction_check" @onchange="ChangingTransactionType">
                    <option value="">Select Type</option>
                    <option value="Credit">Credit</option>
                    <option value="Debit">Debit</option>
                    <option value="Debt">Debt</option>
                </InputSelect>
            </div>

            <div class="transaction_form">
                <label for="title">Title</label>
                <InputText id="title" @bind-Value="newTransact.Title" class="alltransaction_check" />
            </div>

            <div class="transaction_form">
                <label for="amount">Amount</label>
                <InputNumber id="amount" @bind-Value="newTransact.Amount" class="alltransaction_check" />
            </div>

            <div class="transaction_form">
                <label for="date">Date</label>
                <InputDate id="date" @bind-Value="newTransact.Date" class="alltransaction_check" />
            </div>

            @if (newTransact.Type == "Debt")
            {
                <div class="transaction_form">
                    <label for="debtSource">Debt Source</label>
                    <InputText id="debtSource" @bind-Value="newDebtSource" class="alltransaction_check" placeholder="e.g. Loan, Credit Card" />
                </div>

                <div class="transaction_form">
                    <label for="status">Status</label>
                    <InputSelect id="status" @bind-Value="newDebtStatus" class="alltransaction_check">
                        <option value="Pending">Pending</option>
                        <option value="Paid">Paid</option>
                    </InputSelect>
                </div>

                <div class="transaction_form">
                    <label for="paidAmount">Paid Amount</label>
                    <InputNumber id="paidAmount" @bind-Value="newPaidAmount" class="alltransaction_check" />
                </div>
            }

            <div class="transaction_form">
                <label for="tags">Tags</label>
                <div class="tag_selection">
                    <div class="custom_tag_input">
                        <InputText id="customTag" @bind-Value="newCustomTag" placeholder="Add custom tag" class="alltransaction_check" />
                        <button type="button" class="add_tag_button" @onclick="AddingCustomTag">Add Tag</button>
                    </div>
                </div>

                @if (selectedTags?.Any() == true)
                {
                    <div class="selected_tags">
                        @foreach (var tag in selectedTags)
                        {
                            <span class="tag">
                                @tag
                                <button type="button" class="remove_tag" @onclick="() => RemovingTag(tag)">×</button>
                            </span>
                        }
                    </div>
                }
            </div>

            <div class="transaction_form">
                <label for="notes">Notes</label>
                <InputTextArea id="notes" @bind-Value="newTransact.Notes" class="alltransaction_check" />
            </div>

            <!--Buttons for saving and cancelling transactions-->
            <div class="buttons">
                <button type="submit" class="save_button">Save Transaction</button>
                <button type="button" class="cancel_button" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>

        <h2 class="Saving">Saved Transactions</h2>


        <!--Sorting date and filtering type fields-->
        <div class="sort_dropdown">
            <label for="sortOrder">Sort by Date:</label>
            <select id="sortOrder" @onchange="SortingDate">
                <option value="asc">Ascending</option>
                <option value="desc">Descending</option>
            </select>
        </div>

        <div class="sort_dropdown">
            <label for="transactionTypeFilter">Sort by Type:</label>
            <select id="transactionTypeFilter" @onchange="FilteringByType">
                <option value="">All</option>
                <option value="Credit">Credit</option>
                <option value="Debit">Debit</option>
                <option value="Debt">Debt</option>
            </select>
        </div>

        <!--For creating a table-->
        @if (Data.Transactions?.Any() == true)
        {
            <table class="transactions_table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Type</th>
                        <th>Title</th>
                        <th>Amount</th>
                        <th>Date</th>
                        <th>Tags</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in sortedTransactions)
                    {
                        <tr>
                            <td>@transaction.Id</td>
                            <td>@transaction.Type</td>
                            <td>@transaction.Title</td>
                            <td>@transaction.Amount</td>
                            <td>@transaction.Date.ToShortDateString()</td>
                            <td>
                                @if (transaction.Tags?.Any() == true)
                                {
                                    @foreach (var tag in transaction.Tags)
                                    {
                                        <span class="tag">@tag</span>
                                    }
                                }
                                else
                                {
                                    <span>No Tags</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button type="button" class="export_button" @onclick="ExportingToExcel">Export Transactions to Excel</button>
        }
        else
        {
            <p>No transactions found.</p>
        }
    </div>
</div>

@code {
    private int CurrentUserID { get; set; }
    private string Message = string.Empty;
    private Transaction newTransact = new Transaction { Date = DateTime.Now, Tags = new List<string>() };
    private AppData Data;
    private bool isSuccess = false;
    private string newCustomTag = string.Empty;
    private List<string> customTags = new List<string>();
    private List<string> selectedTags = new List<string>();
    private string newDebtSource = string.Empty;
    private string newDebtStatus = "Pending";
    private decimal newPaidAmount = 0m;
    private List<Transaction> sortedTransactions;
    private string selectedSortOrder = "asc";
    private int transactionIdCounter = 0;
    private string selectedFilterType = string.Empty;

    // Filtering transactions by type
    private void FilteringByType(ChangeEventArgs e)
    {
        selectedFilterType = e.Value.ToString();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var filteredTransactions = Data.Transactions.AsEnumerable();

        if (!string.IsNullOrEmpty(selectedFilterType))
        {
            filteredTransactions = filteredTransactions.Where(t => t.Type == selectedFilterType);
        }

        sortedTransactions = selectedSortOrder == "asc"
            ? filteredTransactions.OrderBy(t => t.Date).ToList()
            : filteredTransactions.OrderByDescending(t => t.Date).ToList();

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Data = UserService.DataUpload() ?? new AppData { Transactions = new List<Transaction>(), Debts = new List<Debt>() };
        sortedTransactions = Data.Transactions.OrderBy(t => t.Date).ToList();
        SortingDateDropdown();
        int maxTransactionId = Data.Transactions.Any() ? Data.Transactions.Max(t => t.Id) : 0;
        int maxDebtId = Data.Debts.Any() ? Data.Debts.Max(d => d.Id) : 0;

        // Set the transactionIdCounter as the maximum ID value from both collections + 1
        transactionIdCounter = Math.Max(maxTransactionId, maxDebtId) + 1;
    }


    // Sorting transactions by date
    private void SortingDateDropdown()
    {
        sortedTransactions = selectedSortOrder == "asc"
            ? Data.Transactions.OrderBy(t => t.Date).ToList()
            : Data.Transactions.OrderByDescending(t => t.Date).ToList();
        StateHasChanged();
    }

    private void SortingDate(ChangeEventArgs e)
    {
        selectedSortOrder = e.Value.ToString();
        SortingDateDropdown();
    }

    private void ChangingTransactionType(ChangeEventArgs e)
    {
        if (newTransact.Type != "Debt")
        {
            newDebtSource = string.Empty;
            newDebtStatus = "Pending";
            newPaidAmount = 0m;
        }
    }

    private void AddingCustomTag()
    {
        if (!string.IsNullOrWhiteSpace(newCustomTag) && !customTags.Contains(newCustomTag.Trim(), StringComparer.OrdinalIgnoreCase))
        {
            customTags.Add(newCustomTag.Trim());
            AddingSelectedTag(newCustomTag.Trim());
            newCustomTag = string.Empty;
            StateHasChanged();
        }
    }

    private void AddingSelectedTag(string tag)
    {
        if (!string.IsNullOrWhiteSpace(tag) && !selectedTags.Contains(tag, StringComparer.OrdinalIgnoreCase))
        {
            selectedTags.Add(tag);
            StateHasChanged();
        }
    }

    private void RemovingTag(string tag)
    {
        selectedTags.Remove(tag);
        StateHasChanged();
    }

    // Handling all the added transactions
    private async void HandlingTransactSubmit()
    {
        if (string.IsNullOrWhiteSpace(newTransact.Title))
        {
            Message = "Title is required.";
            isSuccess = false;
            await InvokeAsync(StateHasChanged);
            return;
        }
        if (newTransact.Amount <= 0)
        {
            Message = "Amount should be greater than zero.";
            isSuccess = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        if (newTransact.Tags == null)
        {
            newTransact.Tags = new List<string>();
        }

        if (selectedTags != null && selectedTags.Any())
        {
            newTransact.Tags.Clear();
            newTransact.Tags.AddRange(selectedTags);
        }

        try
        {
            if (newTransact.Type == "Credit")
            {
                newTransact.Credit = newTransact.Amount;
                newTransact.Debit = 0;
                Data.Transactions.Add(newTransact);
                UserService.StoreData(Data);
                Message = "Credit transaction added successfully!";
                isSuccess = true;
            }
            else if (newTransact.Type == "Debit")
            {
                var userTransactions = Data.Transactions.Where(t => t.UserID == CurrentUserID).ToList();
                decimal currentBalance = userTransactions.Sum(t => t.Credit - t.Debit);

                if (currentBalance < newTransact.Amount)
                {
                    Message = "Insufficient balance for this transaction.";
                    isSuccess = false;
                }
                else
                {
                    newTransact.Debit = newTransact.Amount;
                    newTransact.Credit = 0;
                    Data.Transactions.Add(newTransact);
                    UserService.StoreData(Data);
                    Message = "Debit transaction added successfully!";
                    isSuccess = true;
                }
            }

            else if (newTransact.Type == "Debt")
            {
                var newDebt = new Debt
                    {
                        Id = transactionIdCounter++,
                        Source = newDebtSource,
                        Amount = newTransact.Amount,
                        Status = newDebtStatus,
                        Tags = newTransact.Tags,
                        Notes = newTransact.Notes,
                        Date = newTransact.Date
                    };

                if (newPaidAmount >= newDebt.Amount)
                {
                    newDebt.Status = "Paid";
                    newDebt.RemainingAmount = 0;
                    newDebt.PaidAmount = newDebt.Amount;
                }
                else
                {
                    newDebt.Status = "Pending";
                    newDebt.RemainingAmount = newDebt.Amount - newPaidAmount;
                    newDebt.PaidAmount = newPaidAmount;
                }

                Data.Debts.Add(newDebt);
                Data.Transactions.Add(new Transaction
                    {
                        Id = newDebt.Id,
                        Type = "Debt",
                        Title = newDebt.Source,
                        Amount = newDebt.Amount,
                        Date = newDebt.Date,
                        Tags = newDebt.Tags,
                        Notes = newDebt.Notes
                    });
                UserService.StoreData(Data);

                Message = "Debt transaction added successfully!";
                isSuccess = true;

                await Task.Delay(3000);
                NavigationManager.NavigateTo("/mydebt");
            }
        }
        catch (Exception ex)
        {
            Message = $"An error occurred: {ex.Message}";
            isSuccess = false;
        }

        await InvokeAsync(StateHasChanged);

        if (isSuccess)
        {
            await Task.Delay(3000);
            NavigationManager.NavigateTo(newTransact.Type == "Credit" ? "/cashin" : "/cashout");
        }
    }

    // Exporting the data of transactions into excel
    private async Task ExportingToExcel()
    {
        var transactionData = Data.Transactions.Select(t => new
        {
            t.Type,
            t.Title,
            Amount = t.Type == "Credit" ? t.Credit : t.Debit,
            t.Date,
            Tags = t.Tags != null ? string.Join(", ", t.Tags) : "No Tags",
        }).ToList();

        var sheet = new
        {
            fields = new[] { "Type", "Title", "Amount", "Date", "Tags" },
            data = transactionData
        };

        await JSRuntime.InvokeVoidAsync("exportTableToExcel", sheet);
    }

    private void Cancel() =>
        NavigationManager.NavigateTo(newTransact.Type switch
        {
            "Debit" => "/cashout",
            "Credit" => "/cashin",
            "Debt" => "/mydebt",
            _ => "/alltransactions"
        });
}


<!--Styles for transaction page-->

<style>
    .export_button {
        padding: 10px 20px;
        background-color: #F87171;
        color: #ffffff;
        border: none;
        border-radius: 5px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
        display: block;
        margin: 20px auto 0;
    }

        .export_button:hover {
            background-color: #ff9a9a;
        }

    .transaction_page {
        font-family: Arial, sans-serif;
        padding: 20px;
        background-color: #f9f9f9;
        max-width: 600px;
        margin: 0 auto;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .transaction_box {
        background-color: #ffffff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .transaction_box h2 {
            margin-bottom: 20px;
            font-size: 1.5rem;
            color: #F87171;
            text-align: center;
        }

    .transaction_form {
        margin-bottom: 15px;
    }

        .transaction_form label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555555;
        }

    .alltransaction_check {
        width: 100%;
        padding: 10px;
        border: 1px solid #cccccc;
        border-radius: 5px;
        font-size: 1rem;
        background-color: #ffffff;
        color: #333333;
    }

        .alltransaction_check:focus {
            border-color: #F87171;
            outline: none;
            box-shadow: 0 0 3px rgba(248, 113, 113, 0.5);
        }

    .tag_selection {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .custom_tag_input {
        display: flex;
        gap: 10px;
    }

    .add_tag_button {
        padding: 10px 20px;
        background-color: #F87171;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .add_tag_button:hover {
            background-color: #ff9a9a;
        }

    .selected_tags {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-top: 10px;
    }

    .tag {
        background-color: #f3f4f6;
        padding: 4px 8px;
        border-radius: 4px;
        display: flex;
        align-items: center;
        gap: 4px;
    }

    .remove_tag {
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        padding: 0 4px;
        font-size: 16px;
    }

        .remove_tag:hover {
            color: #F87171;
        }

    .buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }

    .save_button, .cancel_button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .save_button {
        background-color: #F87171;
        color: #ffffff;
    }

        .save_button:hover {
            background-color: #ff9a9a;
        }

    .cancel_button {
        background-color: #eeeeee;
        color: #555555;
    }

        .cancel_button:hover {
            background-color: #dddddd;
        }

    .success_message {
        color: #28a745;
        font-size: 1rem;
        font-weight: bold;
        margin-bottom: 15px;
        text-align: center;
    }

    .alert_warning_message {
        color: #dc3545;
        font-size: 1rem;
        font-weight: bold;
        margin-bottom: 15px;
        text-align: center;
    }

    .Saving {
        margin-top: 40px;
    }

    .transactions_table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 30px;
        background-color: #f9f9f9;
    }

        .transactions_table th, .transactions_table td {
            padding: 12px;
            border: 1px solid #dddddd;
            text-align: left;
        }

        .transactions_table th {
            background-color: #F87171;
            color: white;
        }

        .transactions_table tr:nth-child(even) {
            background-color: #f3f4f6;
        }

        .transactions_table tr:hover {
            background-color: #e2e2e2;
        }

    .sort_dropdown {
        margin-bottom: 20px;
    }

        .sort_dropdown select {
            padding: 5px;
            font-size: 14px;
            border-radius: 5px;
            border: 1px solid #ccc;
            background-color: #f9f9f9;
        }

        .sort_dropdown label {
            margin-right: 10px;
            font-size: 16px;
            color: #333;
        }

</style>
