@page "/dashboard"
@using BudgetTracker.Components.Model
@inject UserService UserService
@inject NavigationManager NavigationManager
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

<!-- Dashboard Page -->
<div class="dashboard_page">
    <h1>Dashboard</h1>
    <div class="date_filter_section">
        <label for="startDate">Start Date:</label>
        <input type="date" id="startDate" @bind="startDate" />

        <label for="endDate">End Date:</label>
        <input type="date" id="endDate" @bind="endDate" />

        <button @onclick="Applyfiltration" class="date_filter_button">Filter</button>
    </div>

    <!-- Searching Part -->
    <div class="search_section">
        <div class="search_input_container">
            <input type="text" id="search" @bind="searchQuery" placeholder="Search by title..." />
        </div>
    </div>

    <!-- Summary Boxes -->
    <div class="summary_boxes_section">
        <div class="summary_box">
            <h3>Total Transactions</h3>
            <p>@TotalTransactions</p>
        </div>
        <div class="summary_box">
            <h3>Net Transactions</h3>
            <p>@NetTransactionsFormatted</p>
        </div>
        <div class="summary_box">
            <h3>Current Balance</h3>
            <p>@CurrentBalanceFormatted</p>
        </div>
        <div class="summary_box">
            <h3>Total Inflows (Income)</h3>
            <p>@TotalInflowsFormatted</p>
        </div>
        <div class="summary_box">
            <h3>Total Outflows (Expense)</h3>
            <p>@TotalOutflowsFormatted</p>
        </div>
        <div class="summary_box">
            <h3>Total Remaining Debts</h3>
            <p>@RemainingDebtsFormatted</p>
        </div>
        <div class="summary_box">
            <h3>Cleared Debts</h3>
            <p>@ClearedDebtsFormatted</p>
        </div>
        <div class="summary_box">
            <h3>Total Debts</h3>
            <p>@TotalDebtsFormatted</p>
        </div>
    </div>

    <!-- Highest and Lowest Transactions Side by Side -->
    <div class="main_section">
        <!-- Highest Transactions -->
        <div class="transaction_table_section">
            <h2>Highest Transactions</h2>
            <table class="transaction_table">
                <thead>
                    <tr>
                        <th>Transaction Type</th>
                        <th>Tags</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Highest Inflow</td>
                        <td>@HighestInflowTags</td>
                        <td>@HighestInflowFormatted</td>
                    </tr>
                    <tr>
                        <td>Highest Outflow</td>
                        <td>@HighestOutflowTags</td>
                        <td>@HighestOutflowFormatted</td>
                    </tr>
                    <tr>
                        <td>Highest Debt</td>
                        <td>@HighestDebtTags</td>
                        <td>@HighestDebtFormatted</td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Lowest Transactions -->
        <div class="transaction_table_section">
            <h2>Lowest Transactions</h2>
            <table class="transaction_table">
                <thead>
                    <tr>
                        <th>Transaction Type</th>
                        <th>Tags</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Lowest Inflow</td>
                        <td>@LowestInflowTags</td>
                        <td>@LowestInflowFormatted</td>
                    </tr>
                    <tr>
                        <td>Lowest Outflow</td>
                        <td>@LowestOutflowTags</td>
                        <td>@LowestOutflowFormatted</td>
                    </tr>
                    <tr>
                        <td>Lowest Debt</td>
                        <td>@LowestDebtTags</td>
                        <td>@LowestDebtFormatted</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Pending Debts Section -->
    <div class="pending_debts_section">
        <h2>Pending Debts</h2>
        <div class="table_container">
            <table class="debts_table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Source</th>
                        <th>Amount</th>
                        <th>Date</th>
                        <th>Remaining Amount</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var debt in PendingDebts)
                    {
                        <tr>
                            <td>@debt.Id</td>
                            <td>@debt.Source</td>
                            <td>@FormatCurrency(UserService.ConvertToPreferredCurrency(debt.Amount, UserService.PreferredCurrency))</td>
                            <td>@debt.Date.ToString("MM/dd/yyyy")</td>
                            <td>@FormatCurrency(UserService.ConvertToPreferredCurrency(debt.RemainingAmount, UserService.PreferredCurrency))</td>
                            <td>@debt.Status</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div>
            <button @onclick="AdjustAmounts" class="reset_button">Clear All Amounts</button>
        </div>
    </div>
</div>

@code {
    private AppData Data;
    private DateTime? startDate;
    private DateTime? endDate;
    private string searchQuery = string.Empty;
    private String Message;

    // Loading initial data and setting up the dashboard
    protected override void OnInitialized()
    {
        Data = UserService.DataUpload();
    }

    // Filtering transactions based on user input
    private IEnumerable<Transaction> TransactionFiltering
    {
        get
        {
            var query = Data.Transactions.AsEnumerable();

            if (startDate.HasValue)
                query = query.Where(t => t.Date >= startDate.Value);

            if (endDate.HasValue)
                query = query.Where(t => t.Date <= endDate.Value);

            if (!string.IsNullOrEmpty(searchQuery))
                query = query.Where(t => !string.IsNullOrEmpty(t.Title) && t.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

            return query;
        }
    }

    // Showing all the highest transactions
    private string HighestInflowTags
    {
        get
        {
            var transaction = TransactionFiltering
                .Where(t => t.Type == "Credit")
                .OrderByDescending(t => t.Credit)
                .FirstOrDefault();

            return transaction?.Tags?.Any() == true ? string.Join(", ", transaction.Tags) : "No Tags";
        }
    }

    private string HighestOutflowTags
    {
        get
        {
            var transaction = TransactionFiltering
                .Where(t => t.Type == "Debit")
                .OrderByDescending(t => t.Debit)
                .FirstOrDefault();

            return transaction?.Tags?.Any() == true ? string.Join(", ", transaction.Tags) : "No Tags";
        }
    }

    private string HighestDebtTags
    {
        get
        {
            var debt = Data.Debts
                .OrderByDescending(d => d.Amount)
                .FirstOrDefault();

            return debt?.Tags?.Any() == true ? string.Join(", ", debt.Tags) : "No Tags";
        }
    }

    // Showing all the lowest transactions
    private string LowestInflowTags
    {
        get
        {
            var transaction = TransactionFiltering
                .Where(t => t.Type == "Credit")
                .OrderBy(t => t.Credit)
                .FirstOrDefault();

            return transaction?.Tags?.Any() == true ? string.Join(", ", transaction.Tags) : "No Tags";
        }
    }

    private string LowestOutflowTags
    {
        get
        {
            var transaction = TransactionFiltering
                .Where(t => t.Type == "Debit")
                .OrderBy(t => t.Debit)
                .FirstOrDefault();

            return transaction?.Tags?.Any() == true ? string.Join(", ", transaction.Tags) : "No Tags";
        }
    }

    private string LowestDebtTags
    {
        get
        {
            var debt = Data.Debts
                .OrderBy(d => d.Amount)
                .FirstOrDefault();

            return debt?.Tags?.Any() == true ? string.Join(", ", debt.Tags) : "No Tags";
        }
    }

    // Resetting all amounts to default values
    private void AdjustAmounts()
    {
        // Reset the amounts in the UserService
        UserService.AdjustAmounts();

        // Reload the data after resetting
        Data = UserService.DataUpload();

        // Clear the filtered data to reset transaction-related totals
        startDate = null;
        endDate = null;
        searchQuery = string.Empty;

        // Trigger UI refresh
        StateHasChanged();
    }

    // Applying date filters and updating the UI
    private void Applyfiltration(DateTime startDate, DateTime endDate) => StateHasChanged();

    // Clearing the date filter and refreshing the view
    private void AdjustDateFiltering()
    {
        startDate = null;
        endDate = null;
        Applyfiltration();
    }

    private int TotalTransactions => TransactionFiltering.Count();
    private decimal NetTransactions => TotalInflows + TotalDebts - TotalOutflows;
    private decimal TotalInflows => TransactionFiltering.Where(t => t.Type == "Credit").Sum(t => t.Credit);
    private decimal TotalOutflows => TransactionFiltering.Where(t => t.Type == "Debit").Sum(t => t.Debit);
    private decimal TotalDebts => TransactionFiltering.Where(t => t.Type == "Debt").Sum(t => t.Amount);
    private decimal ClearedDebts => Data.Debts.Where(d => d.Status == "Paid").Sum(d => d.PaidAmount);
    private decimal RemainingDebts => Data.Debts.Where(d => d.Status == "Pending").Sum(d => d.RemainingAmount);
    private decimal CurrentBalance => TotalInflows - TotalOutflows;
    private decimal HighestInflow => TransactionFiltering.Any(t => t.Type == "Credit") ? TransactionFiltering.Where(t => t.Type == "Credit").Max(t => t.Credit) : 0;
    private decimal LowestInflow => TransactionFiltering.Any(t => t.Type == "Credit") ? TransactionFiltering.Where(t => t.Type == "Credit").Min(t => t.Credit) : 0;
    private decimal HighestOutflow => TransactionFiltering.Any(t => t.Type == "Debit") ? TransactionFiltering.Where(t => t.Type == "Debit").Max(t => t.Debit) : 0;
    private decimal LowestOutflow => TransactionFiltering.Any(t => t.Type == "Debit") ? TransactionFiltering.Where(t => t.Type == "Debit").Min(t => t.Debit) : 0;
    private decimal HighestDebt => Data.Debts.Any() ? Data.Debts.Max(d => d.Amount) : 0;
    private decimal LowestDebt => Data.Debts.Any() ? Data.Debts.Min(d => d.Amount) : 0;
    private IEnumerable<Debt> PendingDebts => Data.Debts.Where(d => d.Status == "Pending");
    private void Applyfiltration() => StateHasChanged();

    @code {
        private string CurrencySymbol => GetCurrencySymbol(UserService.PreferredCurrency);

        private string GetCurrencySymbol(string currencyCode)
        {
            return currencyCode switch
            {
                "USD" => "$",
                "NPR" => "रु",
                "INR" => "₹",
                _ => "$" // Default to USD if currency code is not recognized
            };
        }

        // Modifying the summary boxes to use the CurrencySymbol
        private string FormatCurrency(decimal amount)
        {
            return $"{CurrencySymbol}{UserService.ConvertToPreferredCurrency(amount, UserService.PreferredCurrency).ToString("N2")}";
        }

        // Update the summary boxes to use FormatCurrency
        private string NetTransactionsFormatted => FormatCurrency(NetTransactions);
        private string CurrentBalanceFormatted => FormatCurrency(CurrentBalance);
        private string TotalInflowsFormatted => FormatCurrency(TotalInflows);
        private string TotalOutflowsFormatted => FormatCurrency(TotalOutflows);
        private string RemainingDebtsFormatted => FormatCurrency(RemainingDebts);
        private string ClearedDebtsFormatted => FormatCurrency(ClearedDebts);
        private string TotalDebtsFormatted => FormatCurrency(TotalDebts);
        private string HighestInflowFormatted => FormatCurrency(HighestInflow);
        private string LowestInflowFormatted => FormatCurrency(LowestInflow);
        private string HighestOutflowFormatted => FormatCurrency(HighestOutflow);
        private string LowestOutflowFormatted => FormatCurrency(LowestOutflow);
        private string HighestDebtFormatted => FormatCurrency(HighestDebt);
        private string LowestDebtFormatted => FormatCurrency(LowestDebt);
    }

        // Logging the user out and navigating to the login page
        private void Logout() => NavigationManager.NavigateTo("/");
}

<!-- Styles for dashboard page -->
<style>
    .dashboard_page h1 {
        color: #FF746C;
        text-align: center;
        margin-bottom: 30px;
    }

    .search_input_container {
        position: relative;
        width: 50%;
        margin-top: -20px;
    }

        .search_input_container input {
            padding: 8px 35px 8px 10px;
            font-size: 1rem;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 50%;
        }

    .transaction_table_section h2 {
        margin-top: 40px;
        color: #F87171;
    }

    .pending_debts_section h2 {
        margin-top: 20px;
        color: #F87171;
    }

    .dashboard_page {
        font-family: Arial, sans-serif;
        padding: 20px;
        background-color: #f5f5f5;
        max-width: 1200px;
        margin: 0 auto;
    }

    .main_section {
        display: flex;
        justify-content: space-between;
        gap: 20px; /* Add gap between the two tables */
        margin-top: 20px;
    }

    .transaction_table_section {
        width: 48%; /* Ensure this is less than 50% to fit two tables side by side */
        margin: 0; /* Remove any default margins */
    }

    .transaction_table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

        .transaction_table th, .transaction_table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }

        .transaction_table th {
            background-color: #f1f1f1;
        }

    ul {
        list-style-type: none;
        padding: 0;
    }

        ul li {
            margin: 5px 0;
            font-size: 1.1rem;
        }

    .table_container {
        overflow-x: auto;
        margin-top: 15px;
    }

    .debts_table {
        width: 100%;
        border-collapse: collapse;
    }

        .debts_table th, .debts_table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }

        .debts_table th {
            background-color: #f1f1f1;
        }

    .logout_button {
        background-color: #333;
        color: white;
        padding: 10px 20px;
        font-size: 1.2rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 20px;
    }

        .logout_button:hover {
            background-color: #555;
        }

    .reset_button {
        background-color: #F87171;
        color: white;
        padding: 10px 20px;
        font-size: 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 20px;
    }

        .reset_button:hover {
            background-color: #EF4444;
        }

    .cashout_button {
        background-color: #F87171;
        color: white;
        padding: 10px 20px;
        font-size: 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 20px;
    }

        .cashout_button:hover {
            background-color: #EF4444;
        }

    .filter_section {
        display: flex;
        gap: 15px;
        margin-bottom: 20px;
    }

    label {
        font-size: 1rem;
        margin-right: 5px;
    }

    input[type="date"] {
        padding: 8px;
        font-size: 1rem;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .date_filter_section {
        position: absolute;
        margin-top: -18px;
        right: 20px;
        display: flex;
        gap: 15px;
        align-items: center;
    }

        .date_filter_section label,
        .date_filter_section input {
            font-size: 1rem;
        }

    .date_filter_button {
        background-color: #F87171;
        color: white;
        padding: 8px 15px;
        font-size: 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .date_filter_button:hover {
            background-color: #EF4444;
        }

    .search_section {
        margin-bottom: 20px;
        display: flex;
        align-items: center;
    }

        .search_section input {
            padding: 8px;
            font-size: 1rem;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

    .summary_boxes_section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .summary_box {
        background-color: #FFD6D6;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .summary_box h3 {
            margin-bottom: 10px;
            font-size: 1.2rem;
            color: #F87171;
        }

        .summary_box p {
            font-size: 1.5rem;
            font-weight: bold;
        }
</style>