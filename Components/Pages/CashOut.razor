@page "/cashout"
@using BudgetTracker.Components.Model
@inject UserService UserService
@inject NavigationManager NavigationManager
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">


<div class="cashout_page">
    <div class="cashout_box">
        <h1>Cash Out Transactions</h1>

        <!-- Message Display -->
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert alert-warning">@Message</div>
        }

        <!-- filtration Section -->
        <div class="filtration">
            <div class="filtering">
                <label>Date Range:</label>
                <div class="fill_date">
                    <InputDate @bind-Value="startDate" class="cashout_check" />
                    <InputDate @bind-Value="endDate" class="cashout_check" />
                </div>
            </div>

            <div class="filtering">
                <label>Tags:</label>
                <InputText @bind-Value="filterTag" placeholder="filtration by tag" class="cashout_check" />
            </div>

            <button @onclick="Applyfiltration" class="filtration_button">Filter</button>
        </div>

        <!-- Transactions Table -->
        <div class="cashout_table">
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Current Balance</th>
                        <th>Debit Amount</th>
                        <th>Date</th>
                        <th>Type</th>
                        <th>Title</th>
                        <th>Tags</th>
                        <th>Notes</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in filtrationedDebitTransactions)
                    {
                        <tr>
                            <td>@transaction.Id</td>
                            <td>@CurrentBalance</td>
                            <td>@transaction.Debit</td>
                            <td>@transaction.Date.ToString("MM/dd/yyyy")</td>
                            <td>@transaction.Type</td>
                            <td>@transaction.Title</td>
                            <td>@string.Join(", ", transaction.Tags)</td>
                            <td>@transaction.Notes</td>
                            <td>
                                <button @onclick="() => DeletingTransaction(transaction)" class="delete_button">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <button @onclick="AddnewTransact" class="add_button">Add New Transaction</button>
    </div>
</div>
@code {
    private int CurrentUserID { get; set; }
    private Transaction newTransact = new Transaction { Type = "Debit" };
    private string Message = "";
    private AppData Data;
    private DateTime? startDate;
    private DateTime? endDate;
    private string filterTag = "";
    private decimal TotalDebit => filtrationedDebitTransactions.Sum(t => t.Debit);
    private decimal CurrentBalance => Data.Transactions
        .Where(t => t.UserID == CurrentUserID) 
        .Sum(t => t.Credit - t.Debit);

    // Loading initial user data on component initialization
    protected override void OnInitialized()
    {
        Data = UserService.DataUpload();
    }

    // Filtering debit transactions based on user ID, date range, and tag
    private IEnumerable<Transaction> filtrationedDebitTransactions
    {
        get
        {
            var query = Data.Transactions
                .Where(t => t.UserID == CurrentUserID && t.Type == "Debit");  // Corrected to filter by CurrentUserID

            if (startDate.HasValue)
                query = query.Where(t => t.Date >= startDate.Value);

            if (endDate.HasValue)
                query = query.Where(t => t.Date <= endDate.Value);

            if (!string.IsNullOrEmpty(filterTag))
                query = query.Where(t => t.Tags.Any(tag => tag.Contains(filterTag, StringComparison.OrdinalIgnoreCase)));

            return query.OrderByDescending(t => t.Date);
        }
    }

    // Triggering the state change to apply the filters
    private void Applyfiltration()
    {
        StateHasChanged();
    }
    private void AddnewTransact() => NavigationManager.NavigateTo("/alltransactions");


    // Deleting a transaction
    private void DeletingTransaction(Transaction transaction)
    {
        // Verifying user owns this transaction
        if (transaction.UserID != CurrentUserID)  
        {
            Message = "You cannot delete a transaction that does not belong to you.";
            StateHasChanged();
            return;
        }
        Data.Transactions.Remove(transaction);

        // Saving updated transaction data
        UserService.StoreData(Data);
        StateHasChanged();
    }
}

<!--Styles for cashout page-->
<style>
    .cashout_page {
        margin: 20px auto;
        font-family: Arial, sans-serif;
        max-width: 1200px;
    }

    .cashout_box {
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: #ffffff;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .cashout_box h1 {
            margin-bottom: 20px;
            text-align: center;
            color: #FF746C;
        }

    .alert {
        padding: 15px;
        margin-bottom: 20px;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        background-color: #f8d7da;
        color: #721c24;
        text-align: center;
    }

    .filtration {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 20px;
        justify-content: space-between;
        align-items: center;
    }

    .filtering {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .filtering label {
            font-weight: bold;
            color: #555555;
        }

    .fill_date {
        display: flex;
        gap: 10px;
    }

    .cashout_check {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 14px;
    }

    .filtration_button {
        padding: 10px 15px;
        background-color: #F87171;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .filtration_button:hover {
            background-color: #ff9a9a;
        }

    .cashout_table {
        margin-top: 20px;
        overflow-x: auto;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

        .table th, .table td {
            padding: 10px;
            text-align: left;
            border: 1px solid #ccc;
        }

        .table th {
            background-color: #f5f5f5;
            color: #333333;
        }

        .table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

    .delete_button {
        background: none;
        border: none;
        cursor: pointer;
        color: #F87171;
        font-size: 1.2rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .delete_button:hover {
            color: #ff4d4d;
        }

         .add_button {
        display: block;
        margin: 20px auto 0;
        padding: 10px 20px;
        background-color: #F87171;
        color: #ffffff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-align: center;
        transition: background-color 0.3s ease;
    }

        .add_button:hover {
            background-color: #ff9a9a;
        }

</style>