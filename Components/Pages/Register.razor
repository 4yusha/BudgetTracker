@page "/register"
@inject UserService UserService
@inject NavigationManager NavigationManager
@using BudgetTracker.Components.Layout
@using BudgetTracker.Components.Model
@layout FirstLayout

<div class="signup_page">
    <div class="signup_box">
        <h3>Sign Up</h3>
        <input @bind="RegisterUsername" placeholder="Username" />
        <input @bind="RegisterPassword" placeholder="Password" type="password" />
        <input @bind="RegisterEmail" placeholder="Email" />
        <select @bind="SelectedCurrency">
            <option value="">Select Currency</option>
            @foreach (var currency in Currencies)
            {
                <option value="@currency.Key">@currency.Value</option>
            }
        </select>
        <button @onclick="RegisterPage">Register</button>
        <p>Already have an account?<u><a href="/">Login</a></u></p>

        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="message">@Message</p>
        }
    </div>
</div>

@code {
    private string RegisterUsername = "";
    private string RegisterPassword = "";
    private string RegisterEmail = "";
    private string SelectedCurrency = "USD";
    private string Message = "";
    private Dictionary<string, string> Currencies = new();
    private List<User> Users = new();

    protected override async Task OnInitializedAsync()
    {
        // Initializing with specific currencies for Nepal, Australia, and India
        InitializeCurrencies();
        Users = UserService.UsersUpload();
    }

    private void InitializeCurrencies()
    {
        Currencies = new Dictionary<string, string>
        {
            { "NPR", "Nepal (NPR)" },
            { "INR", "India (INR)" },
            { "USD", "United States (USD)" },

        };
    }
    @code {
        private void RegisterPage()
        {
            if (string.IsNullOrWhiteSpace(RegisterUsername) || string.IsNullOrWhiteSpace(RegisterPassword) || string.IsNullOrWhiteSpace(SelectedCurrency))
            {
                Message = "All fields, including currency, are required.";
                return;
            }

            if (Users.Any(u => u.Username == RegisterUsername))
            {
                Message = "Username already exists.";
                return;
            }

            var newUser = new User
            {
                Username = RegisterUsername,
                Password = UserService.PasswordHashing(RegisterPassword),
                Email = RegisterEmail,
                PreferredCurrency = SelectedCurrency
            };

            Users.Add(newUser);
            UserService.StoreUsers(Users);

            // Setting the preferred currency in the UserService
            UserService.PreferredCurrency = SelectedCurrency;

            Message = "Registration successful. Redirecting to login...";
            Task.Delay(2000).ContinueWith(_ => NavigationManager.NavigateTo("/"));
        }
    }

        private class CurrencyResponse
        {
    public Dictionary<string, string> Symbols { get; set; } = new();
        }
}

<!--Styles for register page-->
<style>
    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        width: 100%;
        overflow: hidden;
    }

    body {
        background-image: url('/signup_pic.png');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }

    .signup_page {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        padding: 20px;
    }

    .signup_box {
        background-color: rgba(255, 255, 255, 0.8); /* Increase opacity for better readability */
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 4px 6px rgba(248, 113, 113, 0.1);
        width: 100%;
        max-width: 400px;
        text-align: center;
    }

    h3 {
        color: #F87171;
        font-size: 2rem;
        margin-bottom: 2rem;
        font-weight: bold;
    }

    input, select {
        width: 100%;
        padding: 12px;
        margin: 8px 0;
        border: 2px solid #f0f0f0;
        border-radius: 30px;
        font-size: 1rem;
        background-color: #f7f7f7;
        transition: border-color 0.3s ease;
        color: #333;
    }

        input:focus, select:focus {
            outline: none;
            border-color: #F87171;
            background-color: #ffffff;
        }

    button {
        width: 100%;
        padding: 12px;
        background-color: #F87171;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin: 16px 0;
    }

        button:hover {
            background-color: #ef4444;
        }

        button:active {
            transform: scale(0.98);
        }

    p {
        color: #F87171;
        text-align: center;
        margin-top: 1rem;
        font-size: 0.9rem;
    }

    .message {
        color: #ef4444;
        font-weight: bold;
        text-align: center;
        margin-top: 1rem;
    }
</style>